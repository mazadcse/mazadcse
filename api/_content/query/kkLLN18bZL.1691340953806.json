{"_path":"/code/binary-tree-inorder-traversal","_dir":"code","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"Binary Tree Inorder Traversal","description":"My Solution:","problemUrl":"https://leetcode.com/problems/binary-tree-inorder-traversal/","tags":["python","binary trees","inorder traversal","dfs"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"My Solution"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"className":["language-py"],"code":"# Recursive Approach\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef inorderTraversal(root: Optional[TreeNode]) -> List[int]:\n    if not root:\n        return []\n\n    return [*inorderTraversal(root.left), root.val, *inorderTraversal(root.right)]\n","language":"py","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-188924"},"children":[{"type":"text","value":"# Recursive Approach\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-188924"},"children":[{"type":"text","value":"# Definition for a binary tree node.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-188924"},"children":[{"type":"text","value":"# class TreeNode:\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"class":"ct-188924"},"children":[{"type":"text","value":"#     def __init__(self, val=0, left=None, right=None):\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-188924"},"children":[{"type":"text","value":"#         self.val = val\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-188924"},"children":[{"type":"text","value":"#         self.left = left\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{"class":"ct-188924"},"children":[{"type":"text","value":"#         self.right = right\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{"class":"ct-422695"},"children":[{"type":"text","value":"def"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-215352"},"children":[{"type":"text","value":"inorderTraversal"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":"(root: Optional[TreeNode]) -> List["}]},{"type":"element","tag":"span","props":{"class":"ct-848546"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":"]:\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-422695"},"children":[{"type":"text","value":"if"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-422695"},"children":[{"type":"text","value":"not"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":" root:\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-422695"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":" []\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-422695"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":" ["}]},{"type":"element","tag":"span","props":{"class":"ct-422695"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":"inorderTraversal(root.left), root.val, "}]},{"type":"element","tag":"span","props":{"class":"ct-422695"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-212021"},"children":[{"type":"text","value":"inorderTraversal(root.right)]"}]}]}]}]}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-188924{color:#8B949E;}\n.ct-422695{color:#FF7B72;}\n.ct-212021{color:#C9D1D9;}\n.ct-215352{color:#D2A8FF;}\n.ct-848546{color:#79C0FF;}"}]}],"toc":{"title":"","searchDepth":2,"depth":1,"links":[]}},"_type":"markdown","_id":"content:code:binary-tree-inorder-traversal.md","_source":"content","_file":"code/binary-tree-inorder-traversal.md","_extension":"md"}