import{T as _,M as f}from"./components.6c5e399c.js";import{k as b,o as l,c as T,w as h,a as t,f as c,u as d,t as m,d as o,F as g,r as u,g as F,h as N,e as k}from"./entry.96875049.js";const D={class:"w-10 h-10 flex-shrink-0 flex items-center justify-center bg-slate-200 dark:bg-slate-800 rounded-full p-1 mr-2 overflow-hidden"},S={class:"px-2 py-1"},C={class:"font-semibold mb-1"},M={class:"mb-1"},w={__name:"AppCodeSolutionCard",props:{problemTitle:String,url:String,tags:Array,problemUrl:String},setup(e){const n=e,p=b(()=>{let s=new URL(n.problemUrl).hostname.split(".");return s[s.length-2].toLowerCase()});return(s,v)=>{const i=F,y=N;return l(),T(y,{class:"focused-link card-style w-full flex justify-start items-center px-4 py-3 mb-4 relative",to:e.url,title:e.problemTitle},{default:h(()=>[t("div",D,[c(i,{format:"webp",loading:"lazy",src:`/icons/${d(p)}.png`,alt:`${d(p)}`,title:`${d(p)}`,class:"object-cover rounded-full"},null,8,["src","alt","title"])]),t("div",S,[t("h3",C,m(e.problemTitle),1),t("div",M,[(l(!0),o(g,null,u(e.tags,a=>(l(),o("span",{class:"px-3 py-[.1rem] inline-block rounded-full font-semibold font-mono text-xs mr-1 border border-slate-300 dark:border-slate-500 bg-slate-200 dark:bg-slate-600 text-slate-800 dark:text-slate-100",key:a},m(a),1))),128))])])]),_:1},8,["to","title"])}}},B=w,L={id:"leetcode"},A=t("h1",{class:"text-3xl text-left font-bold mb-6"},"LeetCode Solutions",-1),R={__name:"leetcode",setup(e){const n={title:"Dawit's LeetCode Solutions",description:"This page contains my (imperfect) solutions to some LeetCode problems.",image:"/og-image.png"},p=[{_path:"/leetcode/3-6-9",_dir:"leetcode",_draft:!1,_partial:!1,_locale:"",_empty:!1,title:"3-6-9",description:"My Solution:",problemUrl:"https://binarysearch.com/problems/3-6-9",tags:["python"],body:{type:"root",children:[{type:"element",tag:"p",props:{},children:[{type:"element",tag:"strong",props:{},children:[{type:"text",value:"My Solution"}]},{type:"text",value:":"}]},{type:"element",tag:"code",props:{className:["language-py"],code:`def solve(n):
    num_list = []

    for i in range(1, n+1):
        if i % 3 == 0 or "3" in str(i) or "6" in str(i) or "9" in str(i):
            num_list.append("clap")
        else:
            num_list.append(str(i))

    return num_list
`,language:"py",meta:""},children:[{type:"element",tag:"pre",props:{},children:[{type:"element",tag:"code",props:{__ignoreMap:""},children:[{type:"element",tag:"span",props:{class:"line",line:1},children:[{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"def"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-215352"},children:[{type:"text",value:"solve"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`(n):
`}]}]},{type:"element",tag:"span",props:{class:"line",line:2},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    num_list "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` []
`}]}]},{type:"element",tag:"span",props:{class:"line",line:3},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:4},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"for"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" i "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"in"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"range"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"("}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"1"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:", n"}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"+"}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"1"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`):
`}]}]},{type:"element",tag:"span",props:{class:"line",line:5},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"        "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"if"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" i "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"%"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"3"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"=="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"0"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"or"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-839335"},children:[{type:"text",value:'"3"'}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"in"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"str"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(i) "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"or"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-839335"},children:[{type:"text",value:'"6"'}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"in"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"str"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(i) "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"or"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-839335"},children:[{type:"text",value:'"9"'}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"in"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"str"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`(i):
`}]}]},{type:"element",tag:"span",props:{class:"line",line:6},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"            num_list.append("}]},{type:"element",tag:"span",props:{class:"ct-839335"},children:[{type:"text",value:'"clap"'}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`)
`}]}]},{type:"element",tag:"span",props:{class:"line",line:7},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"        "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"else"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:8},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"            num_list.append("}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"str"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`(i))
`}]}]},{type:"element",tag:"span",props:{class:"line",line:9},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:10},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"return"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" num_list"}]}]}]}]}]},{type:"element",tag:"style",children:[{type:"text",value:`.ct-422695{color:#FF7B72;}
.ct-212021{color:#C9D1D9;}
.ct-215352{color:#D2A8FF;}
.ct-848546{color:#79C0FF;}
.ct-839335{color:#A5D6FF;}`}]}],toc:{title:"",searchDepth:2,depth:1,links:[]}},_type:"markdown",_id:"content:leetcode:3-6-9.md",_source:"content",_file:"leetcode/3-6-9.md",_extension:"md"},{_path:"/leetcode/binary-search",_dir:"leetcode",_draft:!1,_partial:!1,_locale:"",_empty:!1,title:"Binary Search",description:"My Solution:",problemUrl:"https://leetcode.com/problems/binary-search/",tags:["python","binary search"],body:{type:"root",children:[{type:"element",tag:"p",props:{},children:[{type:"element",tag:"strong",props:{},children:[{type:"text",value:"My Solution"}]},{type:"text",value:":"}]},{type:"element",tag:"code",props:{className:["language-py"],code:`def search(nums: List[int], target: int) -> int:
    index = 0
    nums_copy = nums[:]
    midpoint = len(nums_copy)//2
    
    while len(nums_copy) > 1 and target != nums_copy[midpoint]:
        if target > nums_copy[midpoint]:
            index += midpoint
            nums_copy[:] = nums_copy[midpoint:]
        else:
            nums_copy = nums_copy[:midpoint]
        
        midpoint = len(nums_copy)//2
        
        
    return index + midpoint if target == nums_copy[midpoint] else -1
`,language:"py",meta:""},children:[{type:"element",tag:"pre",props:{},children:[{type:"element",tag:"code",props:{__ignoreMap:""},children:[{type:"element",tag:"span",props:{class:"line",line:1},children:[{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"def"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-215352"},children:[{type:"text",value:"search"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(nums: List["}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"int"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"], target: "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"int"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:") -> "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"int"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:2},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    index "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:`0
`}]}]},{type:"element",tag:"span",props:{class:"line",line:3},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    nums_copy "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` nums[:]
`}]}]},{type:"element",tag:"span",props:{class:"line",line:4},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    midpoint "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"len"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(nums_copy)"}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"//"}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:`2
`}]}]},{type:"element",tag:"span",props:{class:"line",line:5},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`    
`}]}]},{type:"element",tag:"span",props:{class:"line",line:6},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"while"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"len"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(nums_copy) "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:">"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"1"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"and"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" target "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"!="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` nums_copy[midpoint]:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:7},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"        "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"if"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" target "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:">"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` nums_copy[midpoint]:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:8},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"            index "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"+="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` midpoint
`}]}]},{type:"element",tag:"span",props:{class:"line",line:9},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"            nums_copy[:] "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` nums_copy[midpoint:]
`}]}]},{type:"element",tag:"span",props:{class:"line",line:10},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"        "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"else"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:11},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"            nums_copy "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` nums_copy[:midpoint]
`}]}]},{type:"element",tag:"span",props:{class:"line",line:12},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`        
`}]}]},{type:"element",tag:"span",props:{class:"line",line:13},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"        midpoint "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"len"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(nums_copy)"}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"//"}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:`2
`}]}]},{type:"element",tag:"span",props:{class:"line",line:14},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`        
`}]}]},{type:"element",tag:"span",props:{class:"line",line:15},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`        
`}]}]},{type:"element",tag:"span",props:{class:"line",line:16},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"return"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" index "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"+"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" midpoint "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"if"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" target "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"=="}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" nums_copy[midpoint] "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"else"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"-"}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"1"}]}]}]}]}]},{type:"element",tag:"style",children:[{type:"text",value:`.ct-422695{color:#FF7B72;}
.ct-212021{color:#C9D1D9;}
.ct-215352{color:#D2A8FF;}
.ct-848546{color:#79C0FF;}`}]}],toc:{title:"",searchDepth:2,depth:1,links:[]}},_type:"markdown",_id:"content:leetcode:binary-search.md",_source:"content",_file:"leetcode/binary-search.md",_extension:"md"},{_path:"/leetcode/binary-tree-inorder-traversal",_dir:"leetcode",_draft:!1,_partial:!1,_locale:"",_empty:!1,title:"Binary Tree Inorder Traversal",description:"My Solution:",problemUrl:"https://leetcode.com/problems/binary-tree-inorder-traversal/",tags:["python","binary trees","inorder traversal","dfs"],body:{type:"root",children:[{type:"element",tag:"p",props:{},children:[{type:"element",tag:"strong",props:{},children:[{type:"text",value:"My Solution"}]},{type:"text",value:":"}]},{type:"element",tag:"code",props:{className:["language-py"],code:`# Recursive Approach

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

def inorderTraversal(root: Optional[TreeNode]) -> List[int]:
    if not root:
        return []

    return [*inorderTraversal(root.left), root.val, *inorderTraversal(root.right)]
`,language:"py",meta:""},children:[{type:"element",tag:"pre",props:{},children:[{type:"element",tag:"code",props:{__ignoreMap:""},children:[{type:"element",tag:"span",props:{class:"line",line:1},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`# Recursive Approach
`}]}]},{type:"element",tag:"span",props:{class:"line",line:2},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:3},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`# Definition for a binary tree node.
`}]}]},{type:"element",tag:"span",props:{class:"line",line:4},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`# class TreeNode:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:5},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#     def __init__(self, val=0, left=None, right=None):
`}]}]},{type:"element",tag:"span",props:{class:"line",line:6},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#         self.val = val
`}]}]},{type:"element",tag:"span",props:{class:"line",line:7},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#         self.left = left
`}]}]},{type:"element",tag:"span",props:{class:"line",line:8},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#         self.right = right
`}]}]},{type:"element",tag:"span",props:{class:"line",line:9},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:10},children:[{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"def"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-215352"},children:[{type:"text",value:"inorderTraversal"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(root: Optional[TreeNode]) -> List["}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"int"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`]:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:11},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"if"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"not"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` root:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:12},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"        "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"return"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` []
`}]}]},{type:"element",tag:"span",props:{class:"line",line:13},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:14},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"return"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" ["}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"*"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"inorderTraversal(root.left), root.val, "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"*"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"inorderTraversal(root.right)]"}]}]}]}]}]},{type:"element",tag:"style",children:[{type:"text",value:`.ct-188924{color:#8B949E;}
.ct-422695{color:#FF7B72;}
.ct-212021{color:#C9D1D9;}
.ct-215352{color:#D2A8FF;}
.ct-848546{color:#79C0FF;}`}]}],toc:{title:"",searchDepth:2,depth:1,links:[]}},_type:"markdown",_id:"content:leetcode:binary-tree-inorder-traversal.md",_source:"content",_file:"leetcode/binary-tree-inorder-traversal.md",_extension:"md"},{_path:"/leetcode/binary-tree-postorder-traversal",_dir:"leetcode",_draft:!1,_partial:!1,_locale:"",_empty:!1,title:"Binary Tree Postorder Traversal",description:"My Solution:",problemUrl:"https://leetcode.com/problems/binary-tree-postorder-traversal/",tags:["python","binary trees","postorder traversal","dfs"],body:{type:"root",children:[{type:"element",tag:"p",props:{},children:[{type:"element",tag:"strong",props:{},children:[{type:"text",value:"My Solution"}]},{type:"text",value:":"}]},{type:"element",tag:"code",props:{className:["language-py"],code:`# Recursive Approach

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

def postorderTraversal(root: Optional[TreeNode]) -> List[int]:
    if not root:
        return []

    return [*postorderTraversal(root.left), *postorderTraversal(root.right), root.val]
`,language:"py",meta:""},children:[{type:"element",tag:"pre",props:{},children:[{type:"element",tag:"code",props:{__ignoreMap:""},children:[{type:"element",tag:"span",props:{class:"line",line:1},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`# Recursive Approach
`}]}]},{type:"element",tag:"span",props:{class:"line",line:2},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:3},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`# Definition for a binary tree node.
`}]}]},{type:"element",tag:"span",props:{class:"line",line:4},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`# class TreeNode:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:5},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#     def __init__(self, val=0, left=None, right=None):
`}]}]},{type:"element",tag:"span",props:{class:"line",line:6},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#         self.val = val
`}]}]},{type:"element",tag:"span",props:{class:"line",line:7},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#         self.left = left
`}]}]},{type:"element",tag:"span",props:{class:"line",line:8},children:[{type:"element",tag:"span",props:{class:"ct-188924"},children:[{type:"text",value:`#         self.right = right
`}]}]},{type:"element",tag:"span",props:{class:"line",line:9},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:10},children:[{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"def"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-215352"},children:[{type:"text",value:"postorderTraversal"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"(root: Optional[TreeNode]) -> List["}]},{type:"element",tag:"span",props:{class:"ct-848546"},children:[{type:"text",value:"int"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:`]:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:11},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"if"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"not"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` root:
`}]}]},{type:"element",tag:"span",props:{class:"line",line:12},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"        "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"return"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:` []
`}]}]},{type:"element",tag:"span",props:{class:"line",line:13},children:[{type:"element",tag:"span",props:{},children:[{type:"text",value:`
`}]}]},{type:"element",tag:"span",props:{class:"line",line:14},children:[{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"    "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"return"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:" ["}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"*"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"postorderTraversal(root.left), "}]},{type:"element",tag:"span",props:{class:"ct-422695"},children:[{type:"text",value:"*"}]},{type:"element",tag:"span",props:{class:"ct-212021"},children:[{type:"text",value:"postorderTraversal(root.right), root.val]"}]}]}]}]}]},{type:"element",tag:"style",children:[{type:"text",value:`.ct-188924{color:#8B949E;}
.ct-422695{color:#FF7B72;}
.ct-212021{color:#C9D1D9;}
.ct-215352{color:#D2A8FF;}
.ct-848546{color:#79C0FF;}`}]}],toc:{title:"",searchDepth:2,depth:1,links:[]}},_type:"markdown",_id:"content:leetcode:binary-tree-postorder-traversal.md",_source:"content",_file:"leetcode/binary-tree-postorder-traversal.md",_extension:"md"}];return(s,v)=>{const i=_,y=f,a=B;return l(),o("main",L,[c(i,null,{default:h(()=>[k(m(n.title),1)]),_:1}),c(y,{name:"description",content:n.description},null,8,["content"]),A,t("section",null,[(l(),o(g,{key:1},u(p,(r,x)=>c(a,{key:x,problemTitle:r.title,url:r._path,tags:r.tags,problemUrl:r.problemUrl},null,8,["problemTitle","url","tags","problemUrl"])),64))])])}}};export{R as default};
